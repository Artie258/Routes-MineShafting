<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Quick Copy — 7 Buttons</title>
  <style>
    :root {
      --bg: #0f172a;        /* slate-900 */
      --panel: #111827;     /* gray-900 */
      --panel-2: #0b1220;   /* darker */
      --text: #e5e7eb;      /* gray-200 */
      --muted: #94a3b8;     /* slate-400 */
      --accent: #60a5fa;    /* blue-400 */
      --accent-2: #38bdf8;  /* sky-400 */
      --ok: #22c55e;        /* green-500 */
      --warn: #f59e0b;      /* amber-500 */
      --radius: 16px;
      --shadow: 0 10px 30px rgba(0,0,0,0.35);
    }
    * { box-sizing: border-box; }
    html, body { height: 100%; }
    body {
      margin: 0;
      background: radial-gradient(1200px 800px at 10% 10%, var(--panel-2), transparent),
                  radial-gradient(1000px 700px at 90% 20%, #0a1b34, transparent),
                  var(--bg);
      color: var(--text);
      font-family: ui-sans-serif, system-ui, -apple-system, "Segoe UI", Roboto, Helvetica, Arial, "Apple Color Emoji", "Segoe UI Emoji";
      display: grid;
      place-items: center;
      padding: 24px;
    }
    .app {
      width: min(100%, 980px);
      background: rgba(17, 24, 39, 0.65);
      backdrop-filter: blur(8px);
      border: 1px solid rgba(255,255,255,0.06);
      box-shadow: var(--shadow);
      border-radius: calc(var(--radius) + 4px);
      overflow: hidden;
    }
    header {
      display: flex;
      align-items: center;
      justify-content: space-between;
      gap: 16px;
      padding: 22px 24px;
      background: linear-gradient(180deg, rgba(255,255,255,0.06), rgba(255,255,255,0));
      border-bottom: 1px solid rgba(255,255,255,0.06);
    }
    header h1 {
      font-size: 1.25rem;
      margin: 0;
      letter-spacing: 0.2px;
    }
    header p { margin: 0; color: var(--muted); font-size: 0.9rem; }

    .grid {
      display: grid;
      grid-template-columns: repeat(1, 1fr);
      gap: 16px;
      padding: 22px;
    }
    @media (min-width: 560px) { .grid { grid-template-columns: repeat(2, 1fr); } }
    @media (min-width: 880px) { .grid { grid-template-columns: repeat(3, 1fr); } }

    .card {
      background: linear-gradient(180deg, rgba(255,255,255,0.04), rgba(255,255,255,0.02));
      border: 1px solid rgba(255,255,255,0.08);
      border-radius: var(--radius);
      padding: 16px;
      display: grid;
      gap: 12px;
      transition: transform .2s ease, box-shadow .2s ease, border-color .2s ease;
    }
    .card:hover { transform: translateY(-2px); box-shadow: 0 12px 28px rgba(0,0,0,0.35); border-color: rgba(255,255,255,0.14); }

    .label { color: var(--muted); font-size: .85rem; letter-spacing: .2px; }
    .preview {
      font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;
      font-size: .9rem; line-height: 1.25rem; color: #d1d5db; /* gray-300 */
      background: rgba(2,6,23,.55);
      border: 1px dashed rgba(255,255,255,.1);
      border-radius: 12px;
      padding: 10px 12px;
      max-height: 110px; overflow: auto;
      white-space: pre-wrap;
    }
    .actions { display: flex; gap: 10px; }
    button.copy {
      flex: 1;
      appearance: none; border: 0; cursor: pointer;
      background: linear-gradient(180deg, var(--accent), var(--accent-2));
      color: #001625; font-weight: 700; letter-spacing: .3px;
      padding: 12px 14px; border-radius: 999px;
      transition: transform .05s ease, filter .2s ease;
    }
    button.copy:active { transform: scale(.98); }
    button.copy.secondary {
      background: transparent; color: var(--text); font-weight: 600; border: 1px solid rgba(255,255,255,.12);
    }

    .toast {
      position: fixed; left: 50%; bottom: 28px; transform: translateX(-50%) translateY(20px);
      background: rgba(2,6,23,0.9); border: 1px solid rgba(255,255,255,0.12);
      color: var(--text); padding: 10px 14px; border-radius: 999px; box-shadow: var(--shadow);
      opacity: 0; pointer-events: none; transition: transform .25s ease, opacity .25s ease;
      font-size: .95rem;
    }
    .toast.show { opacity: 1; transform: translateX(-50%) translateY(0); }

    footer { padding: 12px 18px 20px; color: var(--muted); font-size: .85rem; text-align: center; }
    a { color: var(--accent-2); text-underline-offset: 3px; }
  </style>
</head>
<body>
  <div class="app" role="application">
    <header>
      <div>
        <h1>Quick Copy</h1>
        <p>Click any button to copy its text to your clipboard.</p>
      </div>
      <button class="copy secondary" id="copyAll" title="Copy all 7 messages, separated by blank lines">Copy All</button>
    </header>

    <main class="grid" id="grid">
      <!--
        Edit the label and the data-text for each card below.
        Whatever you put in data-text is what gets copied.
      -->
      <section class="card">
        <div class="label">Button 1</div>
        <pre class="preview" id="prev1"></pre>
        <div class="actions">
          <button class="copy" data-for="1" aria-label="Copy Button 1 text">Copy</button>
        </div>
      </section>
      <section class="card">
        <div class="label">Button 2</div>
        <pre class="preview" id="prev2"></pre>
        <div class="actions">
          <button class="copy" data-for="2" aria-label="Copy Button 2 text">Copy</button>
        </div>
      </section>
      <section class="card">
        <div class="label">Button 3</div>
        <pre class="preview" id="prev3"></pre>
        <div class="actions">
          <button class="copy" data-for="3" aria-label="Copy Button 3 text">Copy</button>
        </div>
      </section>
      <section class="card">
        <div class="label">Button 4</div>
        <pre class="preview" id="prev4"></pre>
        <div class="actions">
          <button class="copy" data-for="4" aria-label="Copy Button 4 text">Copy</button>
        </div>
      </section>
      <section class="card">
        <div class="label">Button 5</div>
        <pre class="preview" id="prev5"></pre>
        <div class="actions">
          <button class="copy" data-for="5" aria-label="Copy Button 5 text">Copy</button>
        </div>
      </section>
      <section class="card">
        <div class="label">Button 6</div>
        <pre class="preview" id="prev6"></pre>
        <div class="actions">
          <button class="copy" data-for="6" aria-label="Copy Button 6 text">Copy</button>
        </div>
      </section>
      <section class="card">
        <div class="label">Button 7</div>
        <pre class="preview" id="prev7"></pre>
        <div class="actions">
          <button class="copy" data-for="7" aria-label="Copy Button 7 text">Copy</button>
        </div>
      </section>
    </main>

    <footer>
      Tip: you can paste multi‑line text into any preview — the button will copy exactly that content.
    </footer>
  </div>

  <div class="toast" id="toast" role="status" aria-live="polite"></div>

  <script>
    // ---- CONFIG: Put your 7 texts here. ----
    const COPY_TEXTS = [
      `Hello! This is the text for Button 1.\nYou can put multiple lines here.`,
      `Thanks for reaching out — here is template #2.`,
      `Button 3 text goes here.`,
      `Button 4 text.`,
      `Button 5 text.`,
      `Button 6 text.`,
      `Button 7 text.`
    ];

    // Render previews from COPY_TEXTS so you can see/edit.
    COPY_TEXTS.forEach((txt, i) => {
      const el = document.getElementById(`prev${i+1}`);
      if (el) el.textContent = txt;
    });

    // Copy helper with secure + fallback support.
    async function copyToClipboard(text) {
      try {
        if (navigator.clipboard && window.isSecureContext) {
          await navigator.clipboard.writeText(text);
        } else {
          // Fallback for non-HTTPS or older browsers
          const ta = document.createElement('textarea');
          ta.value = text;
          ta.setAttribute('readonly', '');
          ta.style.position = 'fixed';
          ta.style.top = '-9999px';
          document.body.appendChild(ta);
          ta.select();
          document.execCommand('copy');
          ta.remove();
        }
        showToast('Copied to clipboard');
      } catch (err) {
        console.error(err);
        showToast('Copy failed. See console.', true);
      }
    }

    // Toast UI
    const toast = document.getElementById('toast');
    let toastTimer;
    function showToast(msg, isWarn = false) {
      toast.textContent = msg;
      toast.style.borderColor = isWarn ? 'var(--warn)' : 'rgba(255,255,255,0.12)';
      toast.classList.add('show');
      clearTimeout(toastTimer);
      toastTimer = setTimeout(() => toast.classList.remove('show'), 1800);
    }

    // Wire up each copy button
    document.querySelectorAll('button.copy:not(.secondary)').forEach(btn => {
      btn.addEventListener('click', () => {
        const idx = Number(btn.getAttribute('data-for')) - 1;
        const text = document.getElementById(`prev${idx+1}`).textContent;
        copyToClipboard(text);
      });
    });

    // Copy All button — joins with a blank line between entries
    document.getElementById('copyAll').addEventListener('click', () => {
      const all = COPY_TEXTS.map((_, i) => document.getElementById(`prev${i+1}`).textContent).join('\n\n');
      copyToClipboard(all);
    });

    // Enable editing previews directly (optional UX nicety)
    document.querySelectorAll('.preview').forEach((pre, i) => {
      pre.setAttribute('contenteditable', 'true');
      pre.addEventListener('input', () => {
        COPY_TEXTS[i] = pre.textContent;
      });
      pre.addEventListener('keydown', (e) => {
        if ((e.metaKey || e.ctrlKey) && e.key.toLowerCase() === 'c') {
          // Allow Cmd/Ctrl+C to copy the preview's text
          e.preventDefault();
          copyToClipboard(pre.textContent);
        }
      });
    });
  </script>
</body>
</html>
